import telebot
import json
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

DATA_FILE = "budgetdata.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if not os.path.exists(DATA_FILE):
        return {"balance": 0, "income": [], "expenses": [], "obligations": []}
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–µ—Å—Ç–∏ —Ç–≤–æ—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∂–∏–∑–Ω—å.\n–û—Ç–ø—Ä–∞–≤—å /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")

@bot.message_handler(commands=["help"])
def help_command(message):
    bot.send_message(message.chat.id, """
üìò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/add_income —Å—É–º–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥
/add_expense —Å—É–º–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
/balance ‚Äî —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
/plan ‚Äî —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
""")

@bot.message_handler(commands=["add_income"])
def add_income(message):
    try:
        parts = message.text.split(maxsplit=2)
        amount = float(parts[1])
        comment = parts[2] if len(parts) > 2 else ""
        data = load_data()
        data["income"].append({"amount": amount, "comment": comment})
        data["balance"] += amount
        save_data(data)
        bot.send_message(message.chat.id, f"‚úÖ –î–æ—Ö–æ–¥ {amount:.2f}‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω: {comment}")
    except:
        bot.send_message(message.chat.id, "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /add_income —Å—É–º–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

@bot.message_handler(commands=["add_expense"])
def add_expense(message):
    try:
        parts = message.text.split(maxsplit=2)
        amount = float(parts[1])
        comment = parts[2] if len(parts) > 2 else ""
        data = load_data()
        data["expenses"].append({"amount": amount, "comment": comment})
        data["balance"] -= amount
        save_data(data)
        bot.send_message(message.chat.id, f"üí∏ –†–∞—Å—Ö–æ–¥ {amount:.2f}‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω: {comment}")
    except:
        bot.send_message(message.chat.id, "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /add_expense —Å—É–º–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

@bot.message_handler(commands=["balance"])
def show_balance(message):
    data = load_data()
    balance = data["balance"]
    bot.send_message(message.chat.id, f"üí∞ –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {balance:.2f}‚ÇΩ")

@bot.message_handler(commands=["plan"])
def show_plan(message):
    obligations = [
        {"comment": "–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç 25.07", "amount": 58000},
        {"comment": "–û–∑–æ–Ω —Ä–∞—Å—Å—Ä–æ—á–∫–∞ 28.07", "amount": 14535},
        {"comment": "–î–µ—Ç—Å–∫–∏–π —Å–∞–¥ –¥–æ 31.07", "amount": 75000}
    ]
    text = "üìÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:\n"
    for item in obligations:
        text += f"‚Äî {item['comment']}: {item['amount']}‚ÇΩ\n"
    bot.send_message(message.chat.id, text)

bot.infinity_polling()
